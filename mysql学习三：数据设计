数据设计流程：   开始-------整理需求--------汇总实体关系，画出ER图---------丰富实体属性信息，设计真实数据库---结束

for example 设计一套选课系统

需要整理：
  设计一套学生公选课定课系统，其中内容包含课程编辑，讲师资料编辑，学生资料编辑，学生选课，考试成绩登记，成绩公示快模块
  1.学生资料编辑这个子模块进行设计
  详情需求整理：学生资料包含学号，姓名，身份证号，籍贯，所学专业，辅导员，所属宿舍信息，成绩公示模块，要求进行最小模块进行设计
  
 
 
数据学习： 
  1.位置在Ubuntu中 /var/lib/mysql/
  列：字段
  行：记录
  如果能够唯一标记某个字段的：那么这就就是主键
 
  RDBMS（relational Database management system）
  通过表来表示关系型：
  mysql(关系型数据库) + redis(缓存) + MongoDB(非关系型数据库)
  sql语句操作数据库
  
  ps ajx|grep mysql   or  ps -aux | grep "mysql"
  
  
  
  数据库设计的原则：
    1.数据库设计起码要占用整个项目的40%以上的时间
    2.数据库设计不仅仅停留页面demo的表面，页面内需要的字段，在数据库设计中只是一部分，还有系统运转，模块交互，中转数据，表之间的联系等需要，绝不是简单的基本数据存储，还有逻辑数据存储
    3.数据库设计完成之后，项目的80%的设计开发在脑海中就已经完成了，每个字段的设计大师有他必要的意义，你在设计每一个字段的同时
    4.数据库设计时要考虑效率和优化问题：一些数据要分析哪些表会存储较多的数据量，对于数据量较大的表设计往往是粗粒度的，也会冗余一些必要字段，已达到尽量用最少的表
    数据表尽量多一点，宽度不要太宽
    5.添加必要（冗余）字段：想创建时间，‘备注’，‘操作用户’ ip和一些其他需求，的字段等，在每张表中必须要有，不是说只有系统中用到的数据才会存到数据库中，一些冗余为了日后维护，分析，扩展而添加的，比如黑客攻击，篡改了数据，我们便可以根据时间和ip来查找攻击
    6.设计合理的表关联：若多张表之间的关系复杂，建议采用第三张映射表来维护两种表的关系，以减低表之间的直接耦合度，若多张表涉及到大数据量的问题，表结构尽量简单，关联也要尽可能避免。
    7.设计表时不加主外键等约束性关联，系统编码阶段完成后再添加约束性关联
    8.选择合适的主键生成策略
    9.尽量多写表，这样，方便修改，易扩展，一个数据库里面可以有很多数据表
