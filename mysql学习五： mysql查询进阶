-- 数据准备
  -- 创建一个数据库
  create database db_test2;
  -- 使用一个数据库
  use db_test2;
  -- 显示使用当前数据是哪个?
  select database();
  -- 创建一个数据表
  -- students表
  create table students(
    id int unsigned primary key auto_increment not null,
    name varchar(20) default '',
    age tinyint unsigned default 0,
    height decimal(5,2),
    gender enum('男','女','中性','保密') default '保密',
    cls_id int unsigned default 0,
    is_delete bit default 0   //bit(2)
  );
  -- classes表
  create table classes(
    id int unsigned auto_increment primary key not null,
    name varchar(30) not null
  );
  -- 准备数据
  -- 想students表中插入数据
  insert into students values
  (0,'小明',18,180.00,2,1,0),
  (0,'小月月',18,180.00,2,1,1),
  (0,'彭于晏',29,185.00,1,1,0),
  (0,'刘德华',59,175.00,1,2,1),
  (0,'黄蓉',38,160.00,2,1,0),
  (0,'凤姐',28,150.00,4,2,1),
  (0,'王祖贤',18,172.00,2,1,1),
  (0,'周杰伦',36,NULL,1,1,0),
  (0,'陈坤',27,181.00,1,2,0),
  (0,'刘亦菲',25,166.00,2,2,0),
  (0,'金星',33,162.00,3,3,1),
  (0,'静香',12,180.00,2,4,0),
  (0,'郭靖',12,170.00,1,4,0),
  (0,'周杰',34,176.00,2,5,0);
  
  -- 向classes表中插入数据
  insert into classes value (0, "python_01期"), (0, "python_02");
  

-- 查询：
  -- 查询所有字段
  -- select * from 表名;
 
  -- 查询指定字段
  -- select 列1,列2,... from 表名;
  
  -- 使用as给字段起别名
  -- select 字段 as 名字... from 表名;
  
  -- select 表名.字段 ... from 表名;
  
  -- 可以通过as给表起别名
  -- select 别名.字段 ... from 表名 as 别名;  不能用真名只能用表名
  -- select distinct s.gender, c.name from students as s, classes as c;
  -- 消除重复行
  -- distinct 字段
  
 -- 条件查询
  -- 比较运算符
    -- select ... from 表名 where ...
    -- >
    -- 查询大于18岁的信息
    -- <
    -- 查询小于18岁的信息
    
    -- >=
    -- <=
    -- 程序小于或者等于18岁的
    
    -- =
    -- 查询年龄为18的
    
    -- != 或者 <>
    
   -- 逻辑运算符
    -- and
    -- 18到28之间的所有学生信息
    select * from students where age>18 and age<28;
    
    -- or
    -- 18以上或者年龄超过180以上的
    select * from students where age>18 or height>=180;
    
    -- not
    -- 不再18以上的女性 这个范围内的信息
    select * from students where not (age>18 and gender=2);
    
   --模糊查询   效率有点低
    -- like
    -- % 替换1个或者多个
    -- _替换1个
    -- 查询姓名中以 "小" 开始的名字
    select name from students where name like "小%";
    -- 查询两个字的名字
    select name from students where name like "__";
    -- 查询只要两个以上的名字
    select name from students where name like "__%";
    
   -- rlike 正则
   -- 查询以 周开始的姓名
   select name from students where name rlike "^周.*";
   -- 正则表达式-链接-https://www.cnblogs.com/fozero/p/7868687.html
   
   
  -- 范围查询
    -- in (1,3,8)表示在一个非连续的范围内 
    -- 年龄为18,34的年龄
    select * from students where age in (12,18,34); or not in
    
    -- 查询连续范围内的 between ... and ...表示一个连续的范围内
    -- 查询年龄在18到34的信息
    select name, age from students where age not between 18 and 34; or with select name,age from students where not age between 18 and 34
    
   -- 空判断
    -- 判空 is null
    -- 查询身高为空的信息
    select * from students where height is null;
    
    -- 判非空  is not null
    
   -- 排序
    -- 查询年龄18到34岁的男性，按到年龄从小到达的排序
    select * from students where (age between 18 and 34) and genger=1 order by age asc; 从小到大
    select * from students where (age between 18 and 34) and genger=1 order by age desc; 从大到小
    
    -- 年龄从小到大，升高从大到小
    
   -- 聚合函数
    -- 总数
    -- count
    -- 查询男性有多少人，女性有多少人
    select * from students where gender=1;
    select count(*) as 男性人数 from students where gender=1;
    -- 最大值
    -- max
    -- 查询最大的年龄
    select max(age) as 年龄最大值 from students;
    -- 最小值
    -- min
    -- 最小值
    -- 求和
    -- sum
    -- 计算年龄总和
    select sum(age) from students where gender=1;
    select avg(age) from students where gender=1;
    select sum(age)/count(*) from students;
    -- 四舍五入 round(123.23, 1) 保留一位小数
    select round(sum(age)/count(*), 2) from students;
    select name, round(avg(height), 2)) from students where gender=1;
    
   -- 分组 和聚合一起用
    -- group by
    -- 按照性别分组， 查询所有的性别
    -- 失败select * from students group by gender;
    -- 计算每种性别中的人数
    select gender from students group by gender;
    select gender, count(*), max(height), avg(height) from students group by gender;
    -- group_concat(...)
    -- 查询同种性别的姓名
    select gender, count(*), group_concat(name), max(height), avg(height) from students group by gender;
    select gender, count(*), group_concat(name, age, height)....
    -- having 是一个分局里面的局部 where是对整个
    -- 查询平均年龄超过30岁的性别，以及姓名 having avg(age) > 30
    select gender, group_concat(name) from students group by gender having avg(age)>3;
   
   -- 分页  limit要放在最后才行
    -- limit start, count
    -- count * pages
   
   -- 连接查询
    -- inner join ... on
    
    
    
    
    
    
