数据库的原则是，够用就行

数据类型：
  整数： int
  小数：decimal
  字符串： varchar, char
  日期：date，time， datetime
  枚举类型：enum
  
  特别说明：
    decimal表示浮点数，如decimal(5,2)表示共5位数，小数占2位
    char表示固定 长度的字符串，如char(3)，如果填充'ab'时会补上一个空格'ad '
    varchar表示可变长度的字符串，如varchar('3') ，填充“ab”就是'ab'
    字符串text表示存储大文本，当字符串大于4000时推荐使用
    对于图片，音频，视频等文件，不存储在数据库中，而是上传到某个服务器上，然后在表中存储这个文件的保存路径
    
   约束   保证数据稳定可靠
    主键primary key：物理上存储的顺序
    非空not null：此字段不允许填写空值
    唯一unique：此字段的值不一样重复
    默认default：当不填写此值会使用默认值，如果填写时以填写为准
    外键foreign key：对关系字段进行约束，当为关系字段填写值时，会关联的表中查询此值是否存在，如果存在则填写成功，如果不存在则填写失败并抛出异常
    说明：虽然外键约束可以保证数据的有效性，但进行数据crud(增加，修改，删除，查询)时，都会降低数据库的性能，所以不推荐使用，那么数据的有效性怎么保证？答：可以在逻辑层进行控制
    
  类型  字节  （signed）有符号范围  （unsigned） 无符号范围
  TINYINT 1 -128~127  0~255
  SMALLINT 2 -32768~32767 0~65535
  MEDIUMINT 3 -8388608~8388607  0~16777215
  INT/INTEGER 4 -2147483648~2147483647  0~4294967295
  BIGINT  8 -9223372036854775805~9223372036854775807 0~18446744073709551615
  
  字符串：
  类型 字节大小 示列
  CHAR  0-255 类型固定长度
  VARCHAR 0-255 可变长度
  TEXT  0-65535 大文本
  
  时间  
  类型  字节大小  示列
  DATE  4        '2020-01-01'
  TIME  3        '12:29:59'
  DATETIME  8    '2020-01-01 12:29:59'
  YEAR  1         '2017'
  TIMESTAMP 4     '1970-01-01 00:00:01' UTC ~ '2038-01-01 00:00:01 'UTC
  
  ==============================================================
  命令行脚本，操作数据库
  登录 mysql -uroot -hlocalhost -p
  退出 exit
  sql语句后面要更 ;
  显示数据版本 select version();
  显示时间  select now();
  查看数据库 show databases;
  创建数据库 create database db_name;
  查看创建数据的语句 show create database db_name;
  删除数据库 drop database db_name;
  查看当前使用的数据库  `python-04`合并的意思
  
  
  操作数据表
  查看当前数据库 select database();  
  use db_name  选择数据库
  
  查看数据表 show tables;
  查看数据表的结构 desc 数据表的名字;   
  创建表：
    create table xxxx(id int, name varchar(30));
    create table yyyy(id int primary key not null auto_increment, name varchar(30));
    
    create table yyyy(
      id int primary key not null auto_increment,
      name varchar(30),
    );
    
    -- desc 数据表的名字
    desc xxxxx;
    
    --- 练习 ----创建一个student(id,name,age,high,gender,cls_id)
   ```
   create table student(
    id int unsigned not null auto_increment primary key,    // 不为空，自动增加，主键
    name varchar(30),
    age tinyint unsigned dedault 0,   // unsigned是无符号操作，默认是有符号的
    high decimal(5,2),    // 小数一般用decimal
    gender enum("男", "女", "中性", "保密") default "保密", // 枚举，当数字比较小的时候，default，默认情况下选择的内容
    cls_id int unsigned       // 切记最后一个不要加逗号
   );
   ```
    
  
